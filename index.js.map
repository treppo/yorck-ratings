{
  "version": 3,
  "sources": [
    "node_modules/watchify/node_modules/browser-pack/_prelude.js",
    "index.js",
    "node_modules/data.either/lib/either.js",
    "node_modules/data.either/lib/index.js",
    "node_modules/data.maybe/lib/index.js",
    "node_modules/data.maybe/lib/maybe.js",
    "node_modules/js-csp/src/csp.core.js",
    "node_modules/js-csp/src/csp.js",
    "node_modules/js-csp/src/csp.operations.js",
    "node_modules/js-csp/src/csp.pipeline.js",
    "node_modules/js-csp/src/impl/buffers.js",
    "node_modules/js-csp/src/impl/channels.js",
    "node_modules/js-csp/src/impl/dispatch.js",
    "node_modules/js-csp/src/impl/process.js",
    "node_modules/js-csp/src/impl/select.js",
    "node_modules/js-csp/src/impl/timers.js",
    "node_modules/underscore/underscore.js"
  ],
  "names": [],
  "mappingsxxZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxtxlln
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "const csp = require('js-csp');\nconst _ = require('underscore');\nconst Maybe = require('data.maybe');\nconst Either = require('data.either');\n\nconst proxify = url => 'http://crossorigin.me/' + url;\nconst unproxify = url => url.replace(/http:\\/\\/crossorigin.me\\//, '');\n\nconst Future = f => {\n  return {\n    get: () => f(x => x),\n    map: g => Future(k => f(result => k(g(result)))),\n    flatMap: h => Future(k => f(result => h(result).map(k).get()))\n  }\n};\n\nconst FutureEither = future => {\n  return {\n    future: future,\n    get: future.get,\n    getOrElse: f => future.map(x => x.getOrElse(f)).get(),\n    map: f => FutureEither(future.map(either =>\n      either.isLeft ? either : Either.Right(f(either.get())))),\n    flatMap: f => {\n      const result = future.flatMap(either => {\n        return either.isLeft ? Future(_ => either) : f(either.get()).future\n      });\n      return FutureEither(result)\n    }\n  }\n};\n\nconst fetch = url => FutureEither(Future(f => {\n  const req = new XMLHttpRequest();\n  req.onload = () =>\n    f(req.status == 200 ? Either.Right(req.responseXML) : Either.Left(req.statusText));\n  req.open(\"GET\", proxify(url), true);\n  req.responseType = \"document\";\n  req.overrideMimeType(\"text/html\");\n  req.send();\n}));\n\nconst YorckInfos = (title, url) => {\n  return {\n    title: title,\n    url: url\n  }\n};\n\nconst ImdbInfos = (title = 'n/a', rating = 'n/a', url = '', ratingsCount = '') => {\n  return {\n    title: title,\n    rating: rating,\n    url: url,\n    ratingsCount: ratingsCount\n  }\n};\n\nconst Movie = (yorckInfos, imdbInfos) => {\n  return {\n    yorck: yorckInfos,\n    imdb: imdbInfos\n  }\n};\n\nconst getYorckInfos = () => {\n  const yorckFilmsUrl = \"http://www.yorck.de/mobile/filme\";\n  const rotateArticle = title => {\n    if (title.includes(', Der')) {\n      return 'Der ' + title.replace(', Der', '')\n    } else if (title.includes(', Die')) {\n      return 'Die ' + title.replace(', Die', '')\n    } else if (title.includes(', Das')) {\n      return 'Das ' + title.replace(', Das', '')\n    } else {\n      return title\n    }\n  };\n  const extractInfos = p => _(p.querySelectorAll('.films a')).map(el => {\n    return YorckInfos(rotateArticle(el.textContent), el.href)\n  });\n\n  const pageEitherFuture = fetch(yorckFilmsUrl);\n  return pageEitherFuture.map(page => extractInfos(page))\n};\n\nconst getMovie = (yorckInfos) => {\n  const imdbUrl = \"http://www.imdb.com\";\n  const toSearchUrl = movie => `${imdbUrl}/find?s=tt&q=${encodeURIComponent(movie)}`;\n\n  const extractMoviePathname = page => {\n    const aEl = page.querySelector('.findList .result_text a');\n    return Maybe.fromNullable(aEl).map(_ => _.pathname)\n  };\n\n  const extractMovieInfos = page => {\n    const $ = (doc, selector) => doc.querySelector(selector) || {textContent: \"n/a\"};\n    const imdbTitle = $(page, '#overview-top .header').textContent;\n    const rating = parseFloat($(page, '#overview-top .star-box-details strong').textContent);\n    const ratingsCount = $(page, '#overview-top .star-box-details > a').textContent.trim();\n    const normalizedRating = isNaN(rating) ? 0 : rating;\n\n    return ImdbInfos(imdbTitle, normalizedRating, unproxify(page.URL), ratingsCount);\n  };\n\n  const searchPageEitherFuture = fetch(toSearchUrl(yorckInfos.title));\n\n  return searchPageEitherFuture.flatMap(searchPage =>\n    extractMoviePathname(searchPage)\n      .map(pathname => fetch(imdbUrl + pathname))\n      .map(pageFutureEither =>\n        pageFutureEither.map(page => Movie(yorckInfos, extractMovieInfos(page))))\n      .getOrElse(FutureEither(Future(_ => Either.Left(\"Couldn't find movie on Imdb\")))));\n};\n\nconst showOnPage = (movies) => {\n  const moviesTable = document.getElementById(\"movies\");\n  let moviesHtml = '';\n  movies.forEach(movie =>\n    moviesHtml += `\n      <tr>\n        <td>\n          ${movie.imdb.rating} (${movie.imdb.ratingsCount})\n        </td>\n        <td>\n          <a href=\"${movie.imdb.url}\">\n            ${movie.imdb.title}\n          </a>\n        </td>\n        <td>\n          <a href=\"${movie.yorck.url}\">\n            ${movie.yorck.title}\n          </a>\n        </td>\n      </tr>`);\n  moviesTable.innerHTML = moviesHtml;\n};\n\nconst showPageLoadError = errorMessage =>\n  document.getElementById(\"errors\").innerHTML += errorMessage;\n\nconst movies = function () {\n  let list = [];\n  return {\n    add: movie => {\n      list.push(movie);\n      list = _(list).sortBy(m => m.imdb.rating).reverse();\n      showOnPage(list)\n    }\n  }\n}();\n\nconst isSneakPreview = infos => infos.title.startsWith('Sneak');\n\nconst getMoviesFromYorckInfos = yorckInfos =>\n    _(yorckInfos)\n      .reject(isSneakPreview)\n      .map(getMovie);\n\n// TODO simplify by introducing ListFutureEither\ngetYorckInfos()\n  .map(getMoviesFromYorckInfos)\n  .map(movieFutureEithers =>\n    movieFutureEithers\n      .map(movieFutureEither =>\n        movieFutureEither\n          .map(movie => { movies.add(movie); return movie })\n          .get()))\n  .getOrElse(showPageLoadError);",
    "// Copyright (c) 2013-2014 Quildreen Motta <quildreen@gmail.com>\n//\n// Permission is hereby granted, free of charge, to any person\n// obtaining a copy of this software and associated documentation files\n// (the \"Software\"), to deal in the Software without restriction,\n// including without limitation the rights to use, copy, modify, merge,\n// publish, distribute, sublicense, and/or sell copies of the Software,\n// and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/**\n * @module lib/either\n */\nmodule.exports = Either\n\n// -- Aliases ----------------------------------------------------------\nvar clone         = Object.create\nvar unimplemented = function(){ throw new Error('Not implemented.') }\nvar noop          = function(){ return this                         }\n\n\n// -- Implementation ---------------------------------------------------\n\n/**\n * The `Either(a, b)` structure represents the logical disjunction between `a`\n * and `b`. In other words, `Either` may contain either a value of type `a` or\n * a value of type `b`, at any given time. This particular implementation is\n * biased on the right value (`b`), thus projections will take the right value\n * over the left one.\n *\n * This class models two different cases: `Left a` and `Right b`, and can hold\n * one of the cases at any given time. The projections are, none the less,\n * biased for the `Right` case, thus a common use case for this structure is to\n * hold the results of computations that may fail, when you want to store\n * additional information on the failure (instead of throwing an exception).\n *\n * Furthermore, the values of `Either(a, b)` can be combined and manipulated by\n * using the expressive monadic operations. This allows safely sequencing\n * operations that may fail, and safely composing values that you don't know\n * whether they're present or not, failing early (returning a `Left a`) if any\n * of the operations fail.\n *\n * While this class can certainly model input validations, the [Validation][]\n * structure lends itself better to that use case, since it can naturally\n * aggregate failures — monads shortcut on the first failure.\n *\n * [Validation]: https://github.com/folktale/data.validation\n *\n *\n * @class\n * @summary\n * Either[α, β] <: Applicative[β]\n *               , Functor[β]\n *               , Chain[β]\n *               , Show\n *               , Eq\n */\nfunction Either() { }\n\nLeft.prototype = clone(Either.prototype)\nfunction Left(a) {\n  this.value = a\n}\n\nRight.prototype = clone(Either.prototype)\nfunction Right(a) {\n  this.value = a\n}\n\n// -- Constructors -----------------------------------------------------\n\n/**\n * Constructs a new `Either[α, β]` structure holding a `Left` value. This\n * usually represents a failure due to the right-bias of this structure.\n *\n * @summary a → Either[α, β]\n */\nEither.Left = function(a) {\n  return new Left(a)\n}\nEither.prototype.Left = Either.Left\n\n/**\n * Constructs a new `Etiher[α, β]` structure holding a `Right` value. This\n * usually represents a successful value due to the right bias of this\n * structure.\n *\n * @summary β → Either[α, β]\n */\nEither.Right = function(a) {\n  return new Right(a)\n}\nEither.prototype.Right = Either.Right\n\n\n// -- Conversions ------------------------------------------------------\n\n/**\n * Constructs a new `Either[α, β]` structure from a nullable type.\n *\n * Takes the `Left` case if the value is `null` or `undefined`. Takes the\n * `Right` case otherwise.\n *\n * @summary α → Either[α, α]\n */\nEither.fromNullable = function(a) {\n  return a != null?       this.Right(a)\n  :      /* otherwise */  this.Left(a)\n}\nEither.prototype.fromNullable = Either.fromNullable\n\n/**\n * Constructs a new `Either[α, β]` structure from a `Validation[α, β]` type.\n *\n * @summary Validation[α, β] → Either[α, β]\n */\nEither.fromValidation = function(a) {\n  return a.fold(this.Left.bind(this), this.Right.bind(this))\n}\n\n\n// -- Predicates -------------------------------------------------------\n\n/**\n * True if the `Either[α, β]` contains a `Left` value.\n *\n * @summary Boolean\n */\nEither.prototype.isLeft = false\nLeft.prototype.isLeft   = true\n\n/**\n * True if the `Either[α, β]` contains a `Right` value.\n *\n * @summary Boolean\n */\nEither.prototype.isRight = false\nRight.prototype.isRight  = true\n\n\n// -- Applicative ------------------------------------------------------\n\n/**\n * Creates a new `Either[α, β]` instance holding the `Right` value `b`.\n *\n * `b` can be any value, including `null`, `undefined` or another\n * `Either[α, β]` structure.\n *\n * @summary β → Either[α, β]\n */\nEither.of = function(a) {\n  return this.Right(a)\n}\nEither.prototype.of = Either.of\n\n\n/**\n * Applies the function inside the `Right` case of the `Either[α, β]` structure\n * to another applicative type.\n *\n * The `Either[α, β]` should contain a function value, otherwise a `TypeError`\n * is thrown.\n *\n * @method\n * @summary (@Either[α, β → γ], f:Applicative[_]) => f[β] → f[γ]\n */\nEither.prototype.ap = unimplemented\n\nLeft.prototype.ap = function(b) {\n  return this\n}\n\nRight.prototype.ap = function(b) {\n  return b.map(this.value)\n}\n\n\n// -- Functor ----------------------------------------------------------\n\n/**\n * Transforms the `Right` value of the `Either[α, β]` structure using a regular\n * unary function.\n *\n * @method\n * @summary (@Either[α, β]) => (β → γ) → Either[α, γ]\n */\nEither.prototype.map = unimplemented\nLeft.prototype.map   = noop\n\nRight.prototype.map = function(f) {\n  return this.of(f(this.value))\n}\n\n\n// -- Chain ------------------------------------------------------------\n\n/**\n * Transforms the `Right` value of the `Either[α, β]` structure using an unary\n * function to monads.\n *\n * @method\n * @summary (@Either[α, β], m:Monad[_]) => (β → m[γ]) → m[γ]\n */\nEither.prototype.chain = unimplemented\nLeft.prototype.chain   = noop\n\nRight.prototype.chain = function(f) {\n  return f(this.value)\n}\n\n\n// -- Show -------------------------------------------------------------\n\n/**\n * Returns a textual representation of the `Either[α, β]` structure.\n *\n * @method\n * @summary (@Either[α, β]) => Void → String\n */\nEither.prototype.toString = unimplemented\n\nLeft.prototype.toString = function() {\n  return 'Either.Left(' + this.value + ')'\n}\n\nRight.prototype.toString = function() {\n  return 'Either.Right(' + this.value + ')'\n}\n\n\n// -- Eq ---------------------------------------------------------------\n\n/**\n * Tests if an `Either[α, β]` structure is equal to another `Either[α, β]`\n * structure.\n *\n * @method\n * @summary (@Either[α, β]) => Either[α, β] → Boolean\n */\nEither.prototype.isEqual = unimplemented\n\nLeft.prototype.isEqual = function(a) {\n  return a.isLeft && (a.value === this.value)\n}\n\nRight.prototype.isEqual = function(a) {\n  return a.isRight && (a.value === this.value)\n}\n\n\n// -- Extracting and recovering ----------------------------------------\n\n/**\n * Extracts the `Right` value out of the `Either[α, β]` structure, if it\n * exists. Otherwise throws a `TypeError`.\n *\n * @method\n * @summary (@Either[α, β]) => Void → β         :: partial, throws\n * @see {@link module:lib/either~Either#getOrElse} — A getter that can handle failures.\n * @see {@link module:lib/either~Either#merge} — The convergence of both values.\n * @throws {TypeError} if the structure has no `Right` value.\n */\nEither.prototype.get = unimplemented\n\nLeft.prototype.get = function() {\n  throw new TypeError(\"Can't extract the value of a Left(a).\")\n}\n\nRight.prototype.get = function() {\n  return this.value\n}\n\n\n/**\n * Extracts the `Right` value out of the `Either[α, β]` structure. If the\n * structure doesn't have a `Right` value, returns the given default.\n *\n * @method\n * @summary (@Either[α, β]) => β → β\n */\nEither.prototype.getOrElse = unimplemented\n\nLeft.prototype.getOrElse = function(a) {\n  return a\n}\n\nRight.prototype.getOrElse = function(_) {\n  return this.value\n}\n\n\n/**\n * Transforms a `Left` value into a new `Either[α, β]` structure. Does nothing\n * if the structure contain a `Right` value.\n *\n * @method\n * @summary (@Either[α, β]) => (α → Either[γ, β]) → Either[γ, β]\n */\nEither.prototype.orElse = unimplemented\nRight.prototype.orElse  = noop\n\nLeft.prototype.orElse = function(f) {\n  return f(this.value)\n}\n\n\n/**\n * Returns the value of whichever side of the disjunction that is present.\n *\n * @summary (@Either[α, α]) => Void → α\n */\nEither.prototype.merge = function() {\n  return this.value\n}\n\n\n// -- Folds and Extended Transformations -------------------------------\n\n/**\n * Applies a function to each case in this data structure.\n *\n * @method\n * @summary (@Either[α, β]) => (α → γ), (β → γ) → γ\n */\nEither.prototype.fold = unimplemented\n\nLeft.prototype.fold = function(f, _) {\n  return f(this.value)\n}\n\nRight.prototype.fold = function(_, g) {\n  return g(this.value)\n}\n\n/**\n * Catamorphism.\n * \n * @method\n * @summary (@Either[α, β]) => { Left: α → γ, Right: β → γ } → γ\n */\nEither.prototype.cata = unimplemented\n\nLeft.prototype.cata = function(pattern) {\n  return pattern.Left(this.value)\n}\n\nRight.prototype.cata = function(pattern) {\n  return pattern.Right(this.value)\n}\n\n\n/**\n * Swaps the disjunction values.\n *\n * @method\n * @summary (@Either[α, β]) => Void → Either[β, α]\n */\nEither.prototype.swap = unimplemented\n\nLeft.prototype.swap = function() {\n  return this.Right(this.value)\n}\n\nRight.prototype.swap = function() {\n  return this.Left(this.value)\n}\n\n\n/**\n * Maps both sides of the disjunction.\n *\n * @method\n * @summary (@Either[α, β]) => (α → γ), (β → δ) → Either[γ, δ]\n */\nEither.prototype.bimap = unimplemented\n\nLeft.prototype.bimap = function(f, _) {\n  return this.Left(f(this.value))\n}\n\nRight.prototype.bimap = function(_, g) {\n  return this.Right(g(this.value))\n}\n\n\n/**\n * Maps the left side of the disjunction.\n *\n * @method\n * @summary (@Either[α, β]) => (α → γ) → Either[γ, β]\n */\nEither.prototype.leftMap = unimplemented\nRight.prototype.leftMap  = noop\n\nLeft.prototype.leftMap = function(f) {\n  return this.Left(f(this.value))\n}\n",
    "// Copyright (c) 2013-2014 Quildreen Motta <quildreen@gmail.com>\n//\n// Permission is hereby granted, free of charge, to any person\n// obtaining a copy of this software and associated documentation files\n// (the \"Software\"), to deal in the Software without restriction,\n// including without limitation the rights to use, copy, modify, merge,\n// publish, distribute, sublicense, and/or sell copies of the Software,\n// and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = require('./either')",
    "// Copyright (c) 2013-2014 Quildreen Motta <quildreen@gmail.com>\n//\n// Permission is hereby granted, free of charge, to any person\n// obtaining a copy of this software and associated documentation files\n// (the \"Software\"), to deal in the Software without restriction,\n// including without limitation the rights to use, copy, modify, merge,\n// publish, distribute, sublicense, and/or sell copies of the Software,\n// and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = require('./maybe')",
    "// Copyright (c) 2013-2014 Quildreen Motta <quildreen@gmail.com>\n//\n// Permission is hereby granted, free of charge, to any person\n// obtaining a copy of this software and associated documentation files\n// (the \"Software\"), to deal in the Software without restriction,\n// including without limitation the rights to use, copy, modify, merge,\n// publish, distribute, sublicense, and/or sell copies of the Software,\n// and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/**\n * @module lib/maybe\n */\nmodule.exports = Maybe\n\n// -- Aliases ----------------------------------------------------------\nvar clone         = Object.create\nvar unimplemented = function(){ throw new Error('Not implemented.') }\nvar noop          = function(){ return this                         }\n\n// -- Implementation ---------------------------------------------------\n\n/**\n * A structure for values that may not be present, or computations that may\n * fail. `Maybe(a)` explicitly models the effects that are implicit in\n * `Nullable` types, thus has none of the problems associated with\n * `null` or `undefined` — like `NullPointerExceptions`.\n *\n * The class models two different cases:\n *\n *  + `Just a` — represents a `Maybe(a)` that contains a value. `a` may\n *     be any value, including `null` or `undefined`.\n *\n *  + `Nothing` — represents a `Maybe(a)` that has no values. Or a\n *     failure that needs no additional information.\n *\n * Common uses of this structure includes modelling values that may or may\n * not be present in a collection, thus instead of needing a\n * `collection.has(a)`, the `collection.get(a)` operation gives you all\n * the information you need — `collection.get(a).is-nothing` being\n * equivalent to `collection.has(a)`; Similarly the same reasoning may\n * be applied to computations that may fail to provide a value, e.g.:\n * `collection.find(predicate)` can safely return a `Maybe(a)` instance,\n * even if the collection contains nullable values.\n *\n * Furthermore, the values of `Maybe(a)` can be combined and manipulated\n * by using the expressive monadic operations. This allows safely\n * sequencing operations that may fail, and safely composing values that\n * you don't know whether they're present or not, failing early\n * (returning a `Nothing`) if any of the operations fail.\n *\n * If one wants to store additional information about failures, the\n * [Either][] and [Validation][] structures provide such a capability, and\n * should be used instead of the `Maybe(a)` structure.\n *\n * [Either]: https://github.com/folktale/data.either\n * [Validation]: https://github.com/folktale/data.validation\n *\n *\n * @class\n */\nfunction Maybe() {}\n\n// The case for successful values\nJust.prototype = clone(Maybe.prototype)\nfunction Just(a){\n  this.value = a\n}\n\n// The case for failure values\nNothing.prototype = clone(Maybe.prototype)\nfunction Nothing(){}\n\n\n// -- Constructors -----------------------------------------------------\n\n/**\n * Constructs a new `Maybe[α]` structure with an absent value. Commonly used\n * to represent a failure.\n *\n * @summary Void → Maybe[α]\n */\nMaybe.Nothing = function() {\n  return new Nothing\n}\nMaybe.prototype.Nothing = Maybe.Nothing\n\n/**\n * Constructs a new `Maybe[α]` structure that holds the single value\n * `α`. Commonly used to represent a success.\n *\n * `α` can be any value, including `null`, `undefined` or another\n * `Maybe[α]` structure.\n *\n * @summary α → Maybe[α]\n */\nMaybe.Just = function(a) {\n  return new Just(a)\n}\nMaybe.prototype.Just = Maybe.Just\n\n\n// -- Conversions ------------------------------------------------------\n\n/**\n * Constructs a new `Maybe[α]` structure from a nullable type.\n *\n * If the value is either `null` or `undefined`, this function returns a\n * `Nothing`, otherwise the value is wrapped in a `Just(α)`.\n *\n * @summary α → Maybe[α]\n */\nMaybe.fromNullable = function(a) {\n  return a != null?       new Just(a)\n  :      /* otherwise */  new Nothing\n}\nMaybe.prototype.fromNullable = Maybe.fromNullable\n\n/**\n * Constructs a new `Maybe[β]` structure from an `Either[α, β]` type.\n *\n * The left side of the `Either` becomes `Nothing`, and the right side\n * is wrapped in a `Just(β)`.\n *\n * @summary Either[α, β] → Maybe[β]\n */\nMaybe.fromEither = function(a) {\n  return a.fold(Maybe.Nothing, Maybe.Just)\n}\nMaybe.prototype.fromEither = Maybe.fromEither\n\n/**\n * Constructs a new `Maybe[β]` structure from a `Validation[α, β]` type.\n *\n * The failure side of the `Validation` becomes `Nothing`, and the right\n * side is wrapped in a `Just(β)`.\n *\n * @method\n * @summary Validation[α, β] → Maybe[β]\n */\nMaybe.fromValidation           = Maybe.fromEither\nMaybe.prototype.fromValidation = Maybe.fromEither\n\n\n// -- Predicates -------------------------------------------------------\n\n/**\n * True if the `Maybe[α]` structure contains a failure (i.e.: `Nothing`).\n *\n * @summary Boolean\n */\nMaybe.prototype.isNothing   = false\nNothing.prototype.isNothing = true\n\n\n/**\n * True if the `Maybe[α]` structure contains a single value (i.e.: `Just(α)`).\n *\n * @summary Boolean\n */\nMaybe.prototype.isJust = false\nJust.prototype.isJust  = true\n\n\n// -- Applicative ------------------------------------------------------\n\n/**\n * Creates a new `Maybe[α]` structure holding the single value `α`.\n *\n * `α` can be any value, including `null`, `undefined`, or another\n * `Maybe[α]` structure.\n *\n * @summary α → Maybe[α]\n */\nMaybe.of = function(a) {\n  return Maybe.prototype.Just(a)\n}\nMaybe.prototype.of = Maybe.of\n\n\n/**\n * Applies the function inside the `Maybe[α]` structure to another\n * applicative type.\n *\n * The `Maybe[α]` structure should contain a function value, otherwise a\n * `TypeError` is thrown.\n *\n * @method\n * @summary (@Maybe[α → β], f:Applicative[_]) => f[α] → f[β]\n */\nMaybe.prototype.ap = unimplemented\n\nNothing.prototype.ap = noop\n\nJust.prototype.ap = function(b) {\n  return b.map(this.value)\n}\n\n\n\n\n// -- Functor ----------------------------------------------------------\n\n/**\n * Transforms the value of the `Maybe[α]` structure using a regular unary\n * function.\n *\n * @method\n * @summary @Maybe[α] => (α → β) → Maybe[β]\n */\nMaybe.prototype.map   = unimplemented\nNothing.prototype.map = noop\n\nJust.prototype.map = function(f) {\n  return this.of(f(this.value))\n}\n\n\n// -- Chain ------------------------------------------------------------\n\n/**\n * Transforms the value of the `Maybe[α]` structure using an unary function\n * to monads.\n *\n * @method\n * @summary (@Maybe[α], m:Monad[_]) => (α → m[β]) → m[β]\n */\nMaybe.prototype.chain   = unimplemented\nNothing.prototype.chain = noop\n\nJust.prototype.chain = function(f) {\n  return f(this.value)\n}\n\n\n// -- Show -------------------------------------------------------------\n\n/**\n * Returns a textual representation of the `Maybe[α]` structure.\n *\n * @method\n * @summary @Maybe[α] => Void → String\n */\nMaybe.prototype.toString = unimplemented\n\nNothing.prototype.toString = function() {\n  return 'Maybe.Nothing'\n}\n\nJust.prototype.toString = function() {\n  return 'Maybe.Just(' + this.value + ')'\n}\n\n\n// -- Eq ---------------------------------------------------------------\n\n/**\n * Tests if a `Maybe[α]` structure is equal to another `Maybe[α]` structure.\n *\n * @method\n * @summary @Maybe[α] => Maybe[α] → Boolean\n */\nMaybe.prototype.isEqual = unimplemented\n\nNothing.prototype.isEqual = function(b) {\n  return b.isNothing\n}\n\nJust.prototype.isEqual = function(b) {\n  return b.isJust\n  &&     b.value === this.value\n}\n\n\n// -- Extracting and recovering ----------------------------------------\n\n/**\n * Extracts the value out of the `Maybe[α]` structure, if it\n * exists. Otherwise throws a `TypeError`.\n *\n * @method\n * @summary @Maybe[α] => Void → a,      :: partial, throws\n * @see {@link module:lib/maybe~Maybe#getOrElse} — A getter that can handle failures\n * @throws {TypeError} if the structure has no value (`Nothing`).\n */\nMaybe.prototype.get = unimplemented\n\nNothing.prototype.get = function() {\n  throw new TypeError(\"Can't extract the value of a Nothing.\")\n}\n\nJust.prototype.get = function() {\n  return this.value\n}\n\n\n/**\n * Extracts the value out of the `Maybe[α]` structure. If there is no value,\n * returns the given default.\n *\n * @method\n * @summary @Maybe[α] => α → α\n */\nMaybe.prototype.getOrElse = unimplemented\n\nNothing.prototype.getOrElse = function(a) {\n  return a\n}\n\nJust.prototype.getOrElse = function(_) {\n  return this.value\n}\n\n\n/**\n * Transforms a failure into a new `Maybe[α]` structure. Does nothing if the\n * structure already contains a value.\n *\n * @method\n * @summary @Maybe[α] => (Void → Maybe[α]) → Maybe[α]\n */\nMaybe.prototype.orElse = unimplemented\n\nNothing.prototype.orElse = function(f) {\n  return f()\n}\n\nJust.prototype.orElse = function(_) {\n  return this\n}\n\n\n/**\n * Catamorphism.\n * \n * @method\n * @summary @Maybe[α] => { Nothing: Void → β, Just: α → β } → β\n */\nMaybe.prototype.cata = unimplemented\n\nNothing.prototype.cata = function(pattern) {\n  return pattern.Nothing()\n}\n\nJust.prototype.cata = function(pattern) {\n  return pattern.Just(this.value);\n}\n\n\n/**\n * JSON serialisation\n *\n * @method\n * @summary @Maybe[α] => Void → Object\n */\nMaybe.prototype.toJSON = unimplemented\n\nNothing.prototype.toJSON = function() {\n  return { '#type': 'folktale:Maybe.Nothing' }\n}\n\nJust.prototype.toJSON = function() {\n  return { '#type': 'folktale:Maybe.Just'\n         , value: this.value }\n}\n",
    "\"use strict\";\n\nvar buffers = require(\"./impl/buffers\");\nvar channels = require(\"./impl/channels\");\nvar select = require(\"./impl/select\");\nvar process = require(\"./impl/process\");\nvar timers = require(\"./impl/timers\");\n\nfunction spawn(gen, creator) {\n  var ch = channels.chan(buffers.fixed(1));\n  (new process.Process(gen, function(value) {\n    if (value === channels.CLOSED) {\n      ch.close();\n    } else {\n      process.put_then_callback(ch, value, function(ok) {\n        ch.close();\n      });\n    }\n  }, creator)).run();\n  return ch;\n};\n\nfunction go(f, args) {\n  args = args || [];\n\n  var gen = f.apply(null, args);\n  return spawn(gen, f);\n};\n\nfunction chan(bufferOrNumber, xform, exHandler) {\n  var buf;\n  if (bufferOrNumber === 0) {\n    bufferOrNumber = null;\n  }\n  if (typeof bufferOrNumber === \"number\") {\n    buf = buffers.fixed(bufferOrNumber);\n  } else {\n    buf = bufferOrNumber;\n  }\n  return channels.chan(buf, xform, exHandler);\n};\n\nfunction promiseChan(xform, exHandler){\n    return chan(buffers.promise(), xform, exHandler);\n};\n\n\nmodule.exports = {\n  buffers: {\n    fixed: buffers.fixed,\n    dropping: buffers.dropping,\n    sliding: buffers.sliding,\n    promise: buffers.promise\n  },\n\n  spawn: spawn,\n  go: go,\n  chan: chan,\n  promiseChan: promiseChan,\n  DEFAULT: select.DEFAULT,\n  CLOSED: channels.CLOSED,\n\n  put: process.put,\n  take: process.take,\n  offer: process.offer,\n  poll: process.poll,\n  sleep: process.sleep,\n  alts: process.alts,\n  putAsync: process.put_then_callback,\n  takeAsync: process.take_then_callback,\n  NO_VALUE: process.NO_VALUE,\n\n  timeout: timers.timeout\n};\n",
    "\"use strict\";\n\nvar csp = require(\"./csp.core\");\nvar operations = require(\"./csp.operations\");\nvar pipeline = require('./csp.pipeline');\n\ncsp.operations = operations;\ncsp.operations.pipeline = pipeline.pipeline;\ncsp.operations.pipelineAsync = pipeline.pipelineAsync;\n\nmodule.exports = csp;\n",
    "\"use strict\";\n\nvar Box = require(\"./impl/channels\").Box;\n\nvar csp = require(\"./csp.core\"),\n    go = csp.go,\n    take = csp.take,\n    put = csp.put,\n    takeAsync = csp.takeAsync,\n    putAsync = csp.putAsync,\n    alts = csp.alts,\n    chan = csp.chan,\n    CLOSED = csp.CLOSED;\n\n\nfunction mapFrom(f, ch) {\n  return {\n    is_closed: function() {\n      return ch.is_closed();\n    },\n    close: function() {\n      ch.close();\n    },\n    _put: function(value, handler) {\n      return ch._put(value, handler);\n    },\n    _take: function(handler) {\n      var result = ch._take({\n        is_active: function() {\n          return handler.is_active();\n        },\n        commit: function() {\n          var take_cb = handler.commit();\n          return function(value) {\n            return take_cb(value === CLOSED ? CLOSED : f(value));\n          };\n        }\n      });\n      if (result) {\n        var value = result.value;\n        return new Box(value === CLOSED ? CLOSED : f(value));\n      } else {\n        return null;\n      }\n    }\n  };\n}\n\nfunction mapInto(f, ch) {\n  return {\n    is_closed: function() {\n      return ch.is_closed();\n    },\n    close: function() {\n      ch.close();\n    },\n    _put: function(value, handler) {\n      return ch._put(f(value), handler);\n    },\n    _take: function(handler) {\n      return ch._take(handler);\n    }\n  };\n}\n\nfunction filterFrom(p, ch, bufferOrN) {\n  var out = chan(bufferOrN);\n  go(function*() {\n    while (true) {\n      var value = yield take(ch);\n      if (value === CLOSED) {\n        out.close();\n        break;\n      }\n      if (p(value)) {\n        yield put(out, value);\n      }\n    }\n  });\n  return out;\n}\n\nfunction filterInto(p, ch) {\n  return {\n    is_closed: function() {\n      return ch.is_closed();\n    },\n    close: function() {\n      ch.close();\n    },\n    _put: function(value, handler) {\n      if (p(value)) {\n        return ch._put(value, handler);\n      } else {\n        return new Box(!ch.is_closed());\n      }\n    },\n    _take: function(handler) {\n      return ch._take(handler);\n    }\n  };\n}\n\nfunction removeFrom(p, ch) {\n  return filterFrom(function(value) {\n    return !p(value);\n  }, ch);\n}\n\nfunction removeInto(p, ch) {\n  return filterInto(function(value) {\n    return !p(value);\n  }, ch);\n}\n\nfunction* mapcat(f, src, dst) {\n  while (true) {\n    var value = yield take(src);\n    if (value === CLOSED) {\n      dst.close();\n      break;\n    } else {\n      var seq = f(value);\n      var length = seq.length;\n      for (var i = 0; i < length; i++) {\n        yield put(dst, seq[i]);\n      }\n      if (dst.is_closed()) {\n        break;\n      }\n    }\n  }\n}\n\nfunction mapcatFrom(f, ch, bufferOrN) {\n  var out = chan(bufferOrN);\n  go(mapcat, [f, ch, out]);\n  return out;\n}\n\nfunction mapcatInto(f, ch, bufferOrN) {\n  var src = chan(bufferOrN);\n  go(mapcat, [f, src, ch]);\n  return src;\n}\n\nfunction pipe(src, dst, keepOpen) {\n  go(function*() {\n    while (true) {\n      var value = yield take(src);\n      if (value === CLOSED) {\n        if (!keepOpen) {\n          dst.close();\n        }\n        break;\n      }\n      if (!(yield put(dst, value))) {\n        break;\n      }\n    }\n  });\n  return dst;\n}\n\nfunction split(p, ch, trueBufferOrN, falseBufferOrN) {\n  var tch = chan(trueBufferOrN);\n  var fch = chan(falseBufferOrN);\n  go(function*() {\n    while (true) {\n      var value = yield take(ch);\n      if (value === CLOSED) {\n        tch.close();\n        fch.close();\n        break;\n      }\n      yield put(p(value) ? tch : fch, value);\n    }\n  });\n  return [tch, fch];\n}\n\nfunction reduce(f, init, ch) {\n  return go(function*() {\n    var result = init;\n    while (true) {\n      var value = yield take(ch);\n      if (value === CLOSED) {\n        return result;\n      } else {\n        result = f(result, value);\n      }\n    }\n  }, [], true);\n}\n\nfunction onto(ch, coll, keepOpen) {\n  return go(function*() {\n    var length = coll.length;\n    // FIX: Should be a generic looping interface (for...in?)\n    for (var i = 0; i < length; i++) {\n      yield put(ch, coll[i]);\n    }\n    if (!keepOpen) {\n      ch.close();\n    }\n  });\n}\n\n// TODO: Bounded?\nfunction fromColl(coll) {\n  var ch = chan(coll.length);\n  onto(ch, coll);\n  return ch;\n}\n\nfunction map(f, chs, bufferOrN) {\n  var out = chan(bufferOrN);\n  var length = chs.length;\n  // Array holding 1 round of values\n  var values = new Array(length);\n  // TODO: Not sure why we need a size-1 buffer here\n  var dchan = chan(1);\n  // How many more items this round\n  var dcount;\n  // put callbacks for each channel\n  var dcallbacks = new Array(length);\n  for (var i = 0; i < length; i ++) {\n    dcallbacks[i] = (function(i) {\n      return function(value) {\n        values[i] = value;\n        dcount --;\n        if (dcount === 0) {\n          putAsync(dchan, values.slice(0));\n        }\n      };\n    }(i));\n  }\n  go(function*() {\n    while (true) {\n      dcount = length;\n      // We could just launch n goroutines here, but for effciency we\n      // don't\n      for (var i = 0; i < length; i ++) {\n        try {\n          takeAsync(chs[i], dcallbacks[i]);\n        } catch (e) {\n          // FIX: Hmm why catching here?\n          dcount --;\n        }\n      }\n      var values = yield take(dchan);\n      for (i = 0; i < length; i ++) {\n        if (values[i] === CLOSED) {\n          out.close();\n          return;\n        }\n      }\n      yield put(out, f.apply(null, values));\n    }\n  });\n  return out;\n}\n\nfunction merge(chs, bufferOrN) {\n  var out = chan(bufferOrN);\n  var actives = chs.slice(0);\n  go(function*() {\n    while (true) {\n      if (actives.length === 0) {\n        break;\n      }\n      var r = yield alts(actives);\n      var value = r.value;\n      if (value === CLOSED) {\n        // Remove closed channel\n        var i = actives.indexOf(r.channel);\n        actives.splice(i, 1);\n        continue;\n      }\n      yield put(out, value);\n    }\n    out.close();\n  });\n  return out;\n}\n\nfunction into(coll, ch) {\n  var result = coll.slice(0);\n  return reduce(function(result, item) {\n    result.push(item);\n    return result;\n  }, result, ch);\n}\n\nfunction takeN(n, ch, bufferOrN) {\n  var out = chan(bufferOrN);\n  go(function*() {\n    for (var i = 0; i < n; i ++) {\n      var value = yield take(ch);\n      if (value === CLOSED) {\n        break;\n      }\n      yield put(out, value);\n    }\n    out.close();\n  });\n  return out;\n}\n\nvar NOTHING = {};\n\nfunction unique(ch, bufferOrN) {\n  var out = chan(bufferOrN);\n  var last = NOTHING;\n  go(function*() {\n    while (true) {\n      var value = yield take(ch);\n      if (value === CLOSED) {\n        break;\n      }\n      if (value === last) {\n        continue;\n      }\n      last = value;\n      yield put(out, value);\n    }\n    out.close();\n  });\n  return out;\n}\n\nfunction partitionBy(f, ch, bufferOrN) {\n  var out = chan(bufferOrN);\n  var part = [];\n  var last = NOTHING;\n  go(function*() {\n    while (true) {\n      var value = yield take(ch);\n      if (value === CLOSED) {\n        if (part.length > 0) {\n          yield put(out, part);\n        }\n        out.close();\n        break;\n      } else {\n        var newItem = f(value);\n        if (newItem === last || last === NOTHING) {\n          part.push(value);\n        } else {\n          yield put(out, part);\n          part = [value];\n        }\n        last = newItem;\n      }\n    }\n  });\n  return out;\n}\n\nfunction partition(n, ch, bufferOrN) {\n  var out = chan(bufferOrN);\n  go(function*() {\n    while (true) {\n      var part = new Array(n);\n      for (var i = 0; i < n; i++) {\n        var value = yield take(ch);\n        if (value === CLOSED) {\n          if (i > 0) {\n            yield put(out, part.slice(0, i));\n          }\n          out.close();\n          return;\n        }\n        part[i] = value;\n      }\n      yield put(out, part);\n    }\n  });\n  return out;\n}\n\n// For channel identification\nvar genId = (function() {\n  var i = 0;\n  return function() {\n    i ++;\n    return \"\" + i;\n  };\n})();\n\nvar ID_ATTR = \"__csp_channel_id\";\n\n// TODO: Do we need to check with hasOwnProperty?\nfunction len(obj) {\n  var count = 0;\n  for (var p in obj) {\n    count ++;\n  }\n  return count;\n}\n\nfunction chanId(ch) {\n  var id = ch[ID_ATTR];\n  if (id === undefined) {\n    id = ch[ID_ATTR] = genId();\n  }\n  return id;\n}\n\nvar Mult = function(ch) {\n  this.taps = {};\n  this.ch = ch;\n};\n\nvar Tap = function(channel, keepOpen) {\n  this.channel = channel;\n  this.keepOpen = keepOpen;\n};\n\nMult.prototype.muxch = function() {\n  return this.ch;\n};\n\nMult.prototype.tap = function(ch, keepOpen) {\n  var id = chanId(ch);\n  this.taps[id] = new Tap(ch, keepOpen);\n};\n\nMult.prototype.untap = function(ch) {\n  delete this.taps[chanId(ch)];\n};\n\nMult.prototype.untapAll = function() {\n  this.taps = {};\n};\n\nfunction mult(ch) {\n  var m = new Mult(ch);\n  var dchan = chan(1);\n  var dcount;\n  function makeDoneCallback(tap) {\n    return function(stillOpen) {\n      dcount --;\n      if (dcount === 0) {\n        putAsync(dchan, true);\n      }\n      if (!stillOpen) {\n        m.untap(tap.channel);\n      }\n    };\n  }\n  go(function*() {\n    while (true) {\n      var value = yield take(ch);\n      var id, t;\n      var taps = m.taps;\n      if (value === CLOSED) {\n        for (id in taps) {\n          t = taps[id];\n          if (!t.keepOpen) {\n            t.channel.close();\n          }\n        }\n        // TODO: Is this necessary?\n        m.untapAll();\n        break;\n      }\n      dcount = len(taps);\n      // XXX: This is because putAsync can actually call back\n      // immediately. Fix that\n      var initDcount = dcount;\n      // Put value on tapping channels...\n      for (id in taps) {\n        t = taps[id];\n        putAsync(t.channel, value, makeDoneCallback(t));\n      }\n      // ... waiting for all puts to complete\n      if (initDcount > 0) {\n        yield take(dchan);\n      }\n    }\n  });\n  return m;\n}\n\nmult.tap = function tap(m, ch, keepOpen) {\n  m.tap(ch, keepOpen);\n  return ch;\n};\n\nmult.untap = function untap(m, ch) {\n  m.untap(ch);\n};\n\nmult.untapAll = function untapAll(m) {\n  m.untapAll();\n};\n\nvar Mix = function(ch) {\n  this.ch = ch;\n  this.stateMap = {};\n  this.change = chan();\n  this.soloMode = mix.MUTE;\n};\n\nMix.prototype._changed = function() {\n  putAsync(this.change, true);\n};\n\nMix.prototype._getAllState = function() {\n  var allState = {};\n  var stateMap = this.stateMap;\n  var solos = [];\n  var mutes = [];\n  var pauses = [];\n  var reads;\n  for (var id in stateMap) {\n    var chanData = stateMap[id];\n    var state = chanData.state;\n    var channel = chanData.channel;\n    if (state[mix.SOLO]) {\n      solos.push(channel);\n    }\n    // TODO\n    if (state[mix.MUTE]) {\n      mutes.push(channel);\n    }\n    if (state[mix.PAUSE]) {\n      pauses.push(channel);\n    }\n  }\n  var i, n;\n  if (this.soloMode === mix.PAUSE && solos.length > 0) {\n    n = solos.length;\n    reads = new Array(n + 1);\n    for (i = 0; i < n; i++) {\n      reads[i] = solos[i];\n    }\n    reads[n] = this.change;\n  } else {\n    reads = [];\n    for (id in stateMap) {\n      chanData = stateMap[id];\n      channel = chanData.channel;\n      if (pauses.indexOf(channel) < 0) {\n        reads.push(channel);\n      }\n    }\n    reads.push(this.change);\n  }\n\n  return {\n    solos: solos,\n    mutes: mutes,\n    reads: reads\n  };\n};\n\nMix.prototype.admix = function(ch) {\n  this.stateMap[chanId(ch)] = {\n    channel: ch,\n    state: {}\n  };\n  this._changed();\n};\n\nMix.prototype.unmix = function(ch) {\n  delete this.stateMap[chanId(ch)];\n  this._changed();\n};\n\nMix.prototype.unmixAll = function() {\n  this.stateMap = {};\n  this._changed();\n};\n\nMix.prototype.toggle = function(updateStateList) {\n  // [[ch1, {}], [ch2, {solo: true}]];\n  var length = updateStateList.length;\n  for (var i = 0; i < length; i++) {\n    var ch = updateStateList[i][0];\n    var id = chanId(ch);\n    var updateState = updateStateList[i][1];\n    var chanData = this.stateMap[id];\n    if (!chanData) {\n      chanData = this.stateMap[id] = {\n        channel: ch,\n        state: {}\n      };\n    }\n    for (var mode in updateState) {\n      chanData.state[mode] = updateState[mode];\n    }\n  }\n  this._changed();\n};\n\nMix.prototype.setSoloMode = function(mode) {\n  if (VALID_SOLO_MODES.indexOf(mode) < 0) {\n    throw new Error(\"Mode must be one of: \", VALID_SOLO_MODES.join(\", \"));\n  }\n  this.soloMode = mode;\n  this._changed();\n};\n\nfunction mix(out) {\n  var m = new Mix(out);\n  go(function*() {\n    var state = m._getAllState();\n    while (true) {\n      var result = yield alts(state.reads);\n      var value = result.value;\n      var channel = result.channel;\n      if (value === CLOSED) {\n        delete m.stateMap[chanId(channel)];\n        state = m._getAllState();\n        continue;\n      }\n      if (channel === m.change) {\n        state = m._getAllState();\n        continue;\n      }\n      var solos = state.solos;\n      if (solos.indexOf(channel) > -1 ||\n          (solos.length === 0 && !(state.mutes.indexOf(channel) > -1))) {\n        var stillOpen = yield put(out, value);\n        if (!stillOpen) {\n          break;\n        }\n      }\n    }\n  });\n  return m;\n}\n\nmix.MUTE = \"mute\";\nmix.PAUSE = \"pause\";\nmix.SOLO = \"solo\";\nvar VALID_SOLO_MODES = [mix.MUTE, mix.PAUSE];\n\nmix.add = function admix(m, ch) {\n  m.admix(ch);\n};\n\nmix.remove = function unmix(m, ch) {\n  m.unmix(ch);\n};\n\nmix.removeAll = function unmixAll(m) {\n  m.unmixAll();\n};\n\nmix.toggle = function toggle(m, updateStateList) {\n  m.toggle(updateStateList);\n};\n\nmix.setSoloMode = function setSoloMode(m, mode) {\n  m.setSoloMode(mode);\n};\n\nfunction constantlyNull() {\n  return null;\n}\n\nvar Pub = function(ch, topicFn, bufferFn) {\n  this.ch = ch;\n  this.topicFn = topicFn;\n  this.bufferFn = bufferFn;\n  this.mults = {};\n};\n\nPub.prototype._ensureMult = function(topic) {\n  var m = this.mults[topic];\n  var bufferFn = this.bufferFn;\n  if (!m) {\n    m = this.mults[topic] = mult(chan(bufferFn(topic)));\n  }\n  return m;\n};\n\nPub.prototype.sub = function(topic, ch, keepOpen) {\n  var m = this._ensureMult(topic);\n  return mult.tap(m, ch, keepOpen);\n};\n\nPub.prototype.unsub = function(topic, ch) {\n  var m = this.mults[topic];\n  if (m) {\n    mult.untap(m, ch);\n  }\n};\n\nPub.prototype.unsubAll = function(topic) {\n  if (topic === undefined) {\n    this.mults = {};\n  } else {\n    delete this.mults[topic];\n  }\n};\n\nfunction pub(ch, topicFn, bufferFn) {\n  bufferFn = bufferFn || constantlyNull;\n  var p = new Pub(ch, topicFn, bufferFn);\n  go(function*() {\n    while (true) {\n      var value = yield take(ch);\n      var mults = p.mults;\n      var topic;\n      if (value === CLOSED) {\n        for (topic in mults) {\n          mults[topic].muxch().close();\n        }\n        break;\n      }\n      // TODO: Somehow ensure/document that this must return a string\n      // (otherwise use proper (hash)maps)\n      topic = topicFn(value);\n      var m = mults[topic];\n      if (m) {\n        var stillOpen = yield put(m.muxch(), value);\n        if (!stillOpen) {\n          delete mults[topic];\n        }\n      }\n    }\n  });\n  return p;\n}\n\npub.sub = function sub(p, topic, ch, keepOpen) {\n  return p.sub(topic, ch, keepOpen);\n};\n\npub.unsub = function unsub(p, topic, ch) {\n  p.unsub(topic, ch);\n};\n\npub.unsubAll = function unsubAll(p, topic) {\n  p.unsubAll(topic);\n};\n\nmodule.exports = {\n  mapFrom: mapFrom,\n  mapInto: mapInto,\n  filterFrom: filterFrom,\n  filterInto: filterInto,\n  removeFrom: removeFrom,\n  removeInto: removeInto,\n  mapcatFrom: mapcatFrom,\n  mapcatInto: mapcatInto,\n\n  pipe: pipe,\n  split: split,\n  reduce: reduce,\n  onto: onto,\n  fromColl: fromColl,\n\n  map: map,\n  merge: merge,\n  into: into,\n  take: takeN,\n  unique: unique,\n  partition: partition,\n  partitionBy: partitionBy,\n\n  mult: mult,\n  mix: mix,\n  pub: pub\n};\n\n\n// Possible \"fluid\" interfaces:\n\n// thread(\n//   [fromColl, [1, 2, 3, 4]],\n//   [mapFrom, inc],\n//   [into, []]\n// )\n\n// thread(\n//   [fromColl, [1, 2, 3, 4]],\n//   [mapFrom, inc, _],\n//   [into, [], _]\n// )\n\n// wrap()\n//   .fromColl([1, 2, 3, 4])\n//   .mapFrom(inc)\n//   .into([])\n//   .unwrap();\n",
    "\"use strict\";\n\nvar csp = require('./csp.core');\n\nfunction pipelineInternal(n, to, from, close, taskFn) {\n  if (n <= 0) {\n    throw new Error('n must be positive');\n  }\n\n  var jobs = csp.chan(n);\n  var results = csp.chan(n);\n\n  for(var _ = 0; _ < n; _++) {\n    csp.go(function* (taskFn, jobs, results) {\n      while (true) {\n        var job = yield csp.take(jobs);\n\n        if (!taskFn(job)) {\n          results.close();\n          break;\n        }\n      }\n    }, [taskFn, jobs, results]);\n  }\n\n  csp.go(function* (jobs, from, results) {\n    while (true) {\n      var v = yield csp.take(from);\n      if (v === csp.CLOSED) {\n        jobs.close();\n        break;\n      } else {\n        var p = csp.chan(1);\n\n        yield csp.put(jobs, [v, p]);\n        yield csp.put(results, p);\n      }\n    }\n  }, [jobs, from, results]);\n\n  csp.go(function* (results, close, to) {\n    while(true) {\n      var p = yield csp.take(results);\n      if (p === csp.CLOSED) {\n        if (close) {\n          to.close();\n        }\n        break;\n      } else {\n        var res = yield csp.take(p);\n        while(true) {\n          var v = yield csp.take(res);\n          if (v !== csp.CLOSED) {\n            yield csp.put(to, v);\n          } else {\n            break;\n          }\n        }\n      }\n    }\n  }, [results, close, to]);\n\n  return to;\n}\n\nfunction pipeline(to, xf, from, keepOpen, exHandler) {\n\n  function taskFn(job) {\n    if (job === csp.CLOSED) {\n      return null;\n    } else {\n      var v = job[0];\n      var p = job[1];\n      var res = csp.chan(1, xf, exHandler);\n\n      csp.go(function* (res, v) {\n        yield csp.put(res, v);\n        res.close();\n      }, [res, v]);\n\n      csp.putAsync(p, res);\n\n      return true;\n    }\n  }\n\n  return pipelineInternal(1, to, from, !keepOpen, taskFn);\n}\n\nfunction pipelineAsync(n, to, af, from, keepOpen) {\n\n  function taskFn(job) {\n    if (job === csp.CLOSED) {\n      return null;\n    } else {\n      var v = job[0];\n      var p = job[1];\n      var res = csp.chan(1);\n      af(v, res);\n      csp.putAsync(p, res);\n      return true;\n    }\n  }\n\n  return pipelineInternal(n, to, from, !keepOpen, taskFn);\n}\n\nmodule.exports = {\n  pipeline: pipeline,\n  pipelineAsync: pipelineAsync\n};\n",
    "\"use strict\";\n\n// TODO: Consider EmptyError & FullError to avoid redundant bound\n// checks, to improve performance (may need benchmarks)\n\nfunction acopy(src, src_start, dst, dst_start, length) {\n  var count = 0;\n  while (true) {\n    if (count >= length) {\n      break;\n    }\n    dst[dst_start + count] = src[src_start + count];\n    count ++;\n  }\n}\n\nfunction noop() {};\n\nvar EMPTY = {\n  toString: function() {\n    return \"[object EMPTY]\";\n  }\n};\n\nvar RingBuffer = function(head, tail, length, array) {\n  this.length = length;\n  this.array = array;\n  this.head = head;\n  this.tail = tail;\n};\n\n// Internal method, callers must do bound check\nRingBuffer.prototype._unshift = function(item) {\n  var array = this.array;\n  var head = this.head;\n  array[head] = item;\n  this.head = (head + 1) % array.length;\n  this.length ++;\n};\n\nRingBuffer.prototype._resize = function() {\n  var array = this.array;\n  var new_length = 2 * array.length;\n  var new_array = new Array(new_length);\n  var head = this.head;\n  var tail = this.tail;\n  var length = this.length;\n  if (tail < head) {\n    acopy(array, tail, new_array, 0, length);\n    this.tail = 0;\n    this.head = length;\n    this.array = new_array;\n  } else if (tail > head) {\n    acopy(array, tail, new_array, 0, array.length - tail);\n    acopy(array, 0, new_array, array.length - tail, head);\n    this.tail = 0;\n    this.head = length;\n    this.array = new_array;\n  } else if (tail === head) {\n    this.tail = 0;\n    this.head = 0;\n    this.array = new_array;\n  }\n};\n\nRingBuffer.prototype.unbounded_unshift = function(item) {\n  if (this.length + 1 === this.array.length) {\n    this._resize();\n  }\n  this._unshift(item);\n};\n\nRingBuffer.prototype.pop = function() {\n  if (this.length === 0) {\n    return EMPTY;\n  }\n  var array = this.array;\n  var tail = this.tail;\n  var item = array[tail];\n  array[tail] = null;\n  this.tail = (tail + 1) % array.length;\n  this.length --;\n  return item;\n};\n\nRingBuffer.prototype.cleanup = function(predicate) {\n  var length = this.length;\n  for (var i = 0; i < length; i++) {\n    var item = this.pop();\n    if (predicate(item)) {\n      this._unshift(item);\n    }\n  }\n};\n\nvar FixedBuffer = function(buf,  n) {\n  this.buf = buf;\n  this.n = n;\n};\n\nFixedBuffer.prototype.is_full = function() {\n  return this.buf.length >= this.n;\n};\n\nFixedBuffer.prototype.remove = function() {\n  return this.buf.pop();\n};\n\nFixedBuffer.prototype.add = function(item) {\n  // Note that even though the underlying buffer may grow, \"n\" is\n  // fixed so after overflowing the buffer is still considered full.\n  this.buf.unbounded_unshift(item);\n};\n\nFixedBuffer.prototype.count = function() {\n  return this.buf.length;\n};\n\nFixedBuffer.prototype.close = noop;\n\nvar DroppingBuffer = function(buf, n) {\n  this.buf = buf;\n  this.n = n;\n};\n\nDroppingBuffer.prototype.is_full = function() {\n  return false;\n};\n\nDroppingBuffer.prototype.remove = function() {\n  return this.buf.pop();\n};\n\nDroppingBuffer.prototype.add = function(item) {\n  if (this.buf.length < this.n) {\n    this.buf._unshift(item);\n  }\n};\n\nDroppingBuffer.prototype.count = function() {\n  return this.buf.length;\n};\n\nDroppingBuffer.prototype.close = noop;\n\nvar SlidingBuffer = function(buf, n) {\n  this.buf = buf;\n  this.n = n;\n};\n\nSlidingBuffer.prototype.is_full = function() {\n  return false;\n};\n\nSlidingBuffer.prototype.remove = function() {\n  return this.buf.pop();\n};\n\nSlidingBuffer.prototype.add = function(item) {\n  if (this.buf.length === this.n) {\n    this.buf.pop();\n  }\n  this.buf._unshift(item);\n};\n\nSlidingBuffer.prototype.count = function() {\n  return this.buf.length;\n};\n\nSlidingBuffer.prototype.close = noop;\n\nvar PromiseBuffer = function PromiseBuffer() {\n  this.val = EMPTY;\n};\n\nPromiseBuffer.prototype.count = function() {\n  return (this.val === EMPTY) ? 0 : 1;\n};\n\nPromiseBuffer.prototype.add = function(item) {\n  if (this.val === EMPTY) {\n    this.val = item;\n  }\n};\n\nPromiseBuffer.prototype.is_full = function() {\n  return false;\n};\n\nPromiseBuffer.prototype.remove = function() {\n  return this.val;\n};\n\nPromiseBuffer.prototype.close = function() {\n  this.val = EMPTY;\n};\n\nvar ring = exports.ring = function ring_buffer(n) {\n  return new RingBuffer(0, 0, 0, new Array(n));\n};\n\n/**\n * Returns a buffer that is considered \"full\" when it reaches size n,\n * but still accepts additional items, effectively allow overflowing.\n * The overflowing behavior is useful for supporting \"expanding\"\n * transducers, where we want to check if a buffer is full before\n * running the transduced step function, while still allowing a\n * transduced step to expand into multiple \"essence\" steps.\n */\nexports.fixed = function fixed_buffer(n) {\n  return new FixedBuffer(ring(n), n);\n};\n\nexports.dropping = function dropping_buffer(n) {\n  return new DroppingBuffer(ring(n), n);\n};\n\nexports.sliding = function sliding_buffer(n) {\n  return new SlidingBuffer(ring(n), n);\n};\n\nexports.promise = function promise_buffer() {\n  return new PromiseBuffer();\n};\n\nexports.EMPTY = EMPTY;\n",
    "\"use strict\";\n\nvar buffers = require(\"./buffers\");\nvar dispatch = require(\"./dispatch\");\n\nvar MAX_DIRTY = 64;\nvar MAX_QUEUE_SIZE = 1024;\n\nvar CLOSED = null;\n\nvar Box = function(value) {\n  this.value = value;\n};\n\nvar PutBox = function(handler, value) {\n  this.handler = handler;\n  this.value = value;\n};\n\nvar Channel = function(takes, puts, buf, xform) {\n  this.buf = buf;\n  this.xform = xform;\n  this.takes = takes;\n  this.puts = puts;\n\n  this.dirty_takes = 0;\n  this.dirty_puts = 0;\n  this.closed = false;\n};\n\nfunction isReduced(v) {\n  return v && v[\"@@transducer/reduced\"];\n}\n\nfunction schedule(f, v) {\n  dispatch.run(function() {\n    f(v);\n  });\n}\n\nChannel.prototype._put = function(value, handler) {\n  if (value === CLOSED) {\n    throw new Error(\"Cannot put CLOSED on a channel.\");\n  }\n\n  // TODO: I'm not sure how this can happen, because the operations\n  // are registered in 1 tick, and the only way for this to be inactive\n  // is for a previous operation in the same alt to have returned\n  // immediately, which would have short-circuited to prevent this to\n  // be ever register anyway. The same thing goes for the active check\n  // in \"_take\".\n  if (!handler.is_active()) {\n    return null;\n  }\n\n  if (this.closed) {\n    handler.commit();\n    return new Box(false);\n  }\n\n  var taker, callback;\n\n  // Soak the value through the buffer first, even if there is a\n  // pending taker. This way the step function has a chance to act on the\n  // value.\n  if (this.buf && !this.buf.is_full()) {\n    handler.commit();\n    var done = isReduced(this.xform[\"@@transducer/step\"](this.buf, value));\n    while (true) {\n      if (this.buf.count() === 0) {\n        break;\n      }\n      taker = this.takes.pop();\n      if (taker === buffers.EMPTY) {\n        break;\n      }\n      if (taker.is_active()) {\n        value = this.buf.remove();\n        callback = taker.commit();\n        schedule(callback, value);\n      }\n    }\n    if (done) {\n      this.close();\n    }\n    return new Box(true);\n  }\n\n  // Either the buffer is full, in which case there won't be any\n  // pending takes, or we don't have a buffer, in which case this loop\n  // fulfills the first of them that is active (note that we don't\n  // have to worry about transducers here since we require a buffer\n  // for that).\n  while (true) {\n    taker = this.takes.pop();\n    if (taker === buffers.EMPTY) {\n      break;\n    }\n    if (taker.is_active()) {\n      handler.commit();\n      callback = taker.commit();\n      schedule(callback, value);\n      return new Box(true);\n    }\n  }\n\n  // No buffer, full buffer, no pending takes. Queue this put now if blockable.\n  if (this.dirty_puts > MAX_DIRTY) {\n    this.puts.cleanup(function(putter) {\n      return putter.handler.is_active();\n    });\n    this.dirty_puts = 0;\n  } else {\n    this.dirty_puts ++;\n  }\n  if (handler.is_blockable()) {\n    if (this.puts.length >= MAX_QUEUE_SIZE) {\n        throw new Error(\"No more than \" + MAX_QUEUE_SIZE + \" pending puts are allowed on a single channel.\");\n    }\n    this.puts.unbounded_unshift(new PutBox(handler, value));\n  }\n  return null;\n};\n\nChannel.prototype._take = function(handler) {\n  if (!handler.is_active()) {\n    return null;\n  }\n\n  var putter, put_handler, callback, value;\n\n  if (this.buf && this.buf.count() > 0) {\n    handler.commit();\n    value = this.buf.remove();\n    // We need to check pending puts here, other wise they won't\n    // be able to proceed until their number reaches MAX_DIRTY\n    while (true) {\n      if (this.buf.is_full()) {\n        break;\n      }\n      putter = this.puts.pop();\n      if (putter === buffers.EMPTY) {\n        break;\n      }\n      put_handler = putter.handler;\n      if (put_handler.is_active()) {\n        callback = put_handler.commit();\n        if (callback) {\n          schedule(callback, true);\n        }\n        if (isReduced(this.xform[\"@@transducer/step\"](this.buf, putter.value))) {\n          this.close();\n        }\n      }\n    }\n    return new Box(value);\n  }\n\n  // Either the buffer is empty, in which case there won't be any\n  // pending puts, or we don't have a buffer, in which case this loop\n  // fulfills the first of them that is active (note that we don't\n  // have to worry about transducers here since we require a buffer\n  // for that).\n  while (true) {\n    putter = this.puts.pop();\n    value = putter.value;\n    if (putter === buffers.EMPTY) {\n      break;\n    }\n    put_handler = putter.handler;\n    if (put_handler.is_active()) {\n      handler.commit();\n      callback = put_handler.commit();\n      if (callback) {\n        schedule(callback, true);\n      }\n      return new Box(value);\n    }\n  }\n\n  if (this.closed) {\n    handler.commit();\n    return new Box(CLOSED);\n  }\n\n  // No buffer, empty buffer, no pending puts. Queue this take now if blockable.\n  if (this.dirty_takes > MAX_DIRTY) {\n    this.takes.cleanup(function(handler) {\n      return handler.is_active();\n    });\n    this.dirty_takes = 0;\n  } else {\n    this.dirty_takes ++;\n  }\n  if (handler.is_blockable()) {\n    if (this.takes.length >= MAX_QUEUE_SIZE) {\n      throw new Error(\"No more than \" + MAX_QUEUE_SIZE + \" pending takes are allowed on a single channel.\");\n    }\n    this.takes.unbounded_unshift(handler);\n  }\n  return null;\n};\n\nChannel.prototype.close = function() {\n  if (this.closed) {\n    return;\n  }\n  this.closed = true;\n\n  // TODO: Duplicate code. Make a \"_flush\" function or something\n  if (this.buf) {\n    this.buf.close();\n    this.xform[\"@@transducer/result\"](this.buf);\n    while (true) {\n      if (this.buf.count() === 0) {\n        break;\n      }\n      taker = this.takes.pop();\n      if (taker === buffers.EMPTY) {\n        break;\n      }\n      if (taker.is_active()) {\n        callback = taker.commit();\n        var value = this.buf.remove();\n        schedule(callback, value);\n      }\n    }\n  }\n\n  while (true) {\n    var taker = this.takes.pop();\n    if (taker === buffers.EMPTY) {\n      break;\n    }\n    if (taker.is_active()) {\n      var callback = taker.commit();\n      schedule(callback, CLOSED);\n    }\n  }\n\n  while (true) {\n    var putter = this.puts.pop();\n    if (putter === buffers.EMPTY) {\n      break;\n    }\n    if (putter.handler.is_active()) {\n      var put_callback = putter.handler.commit();\n      if (put_callback) {\n        schedule(put_callback, false);\n      }\n    }\n  }\n};\n\n\nChannel.prototype.is_closed = function() {\n  return this.closed;\n};\n\nfunction defaultHandler(e) {\n  console.log('error in channel transformer', e.stack);\n  return CLOSED;\n}\n\nfunction handleEx(buf, exHandler, e) {\n  var def = (exHandler || defaultHandler)(e);\n  if (def !== CLOSED) {\n    buf.add(def);\n  }\n  return buf;\n}\n\n// The base transformer object to use with transducers\nfunction AddTransformer() {\n}\n\nAddTransformer.prototype[\"@@transducer/init\"] = function() {\n  throw new Error('init not available');\n};\n\nAddTransformer.prototype[\"@@transducer/result\"] = function(v) {\n  return v;\n};\n\nAddTransformer.prototype[\"@@transducer/step\"] = function(buffer, input) {\n  buffer.add(input);\n  return buffer;\n};\n\n\nfunction handleException(exHandler) {\n  return function(xform) {\n    return {\n      \"@@transducer/step\": function(buffer, input) {\n        try {\n          return xform[\"@@transducer/step\"](buffer, input);\n        } catch (e) {\n          return handleEx(buffer, exHandler, e);\n        }\n      },\n      \"@@transducer/result\": function(buffer) {\n        try {\n          return xform[\"@@transducer/result\"](buffer);\n        } catch (e) {\n          return handleEx(buffer, exHandler, e);\n        }\n      }\n    };\n  };\n}\n\n// XXX: This is inconsistent. We should either call the reducing\n// function xform, or call the transducer xform, not both\nexports.chan = function(buf, xform, exHandler) {\n  if (xform) {\n    if (!buf) {\n      throw new Error(\"Only buffered channels can use transducers\");\n    }\n\n    xform = xform(new AddTransformer());\n  } else {\n    xform = new AddTransformer();\n  }\n  xform = handleException(exHandler)(xform);\n\n  return new Channel(buffers.ring(32), buffers.ring(32), buf, xform);\n};\n\nexports.Box = Box;\nexports.Channel = Channel;\nexports.CLOSED = CLOSED;\n",
    "\"use strict\";\n\n// TODO: Use process.nextTick if it's available since it's more\n// efficient\n// http://howtonode.org/understanding-process-next-tick\n// Maybe we don't even need to queue ourselves in that case?\n\n// XXX: But http://blog.nodejs.org/2013/03/11/node-v0-10-0-stable/\n// Looks like it will blow up the stack (or is that just about\n// pre-empting IO (but that's already bad enough IMO)?)\n\n// Looks like\n// http://nodejs.org/api/process.html#process_process_nexttick_callback\n// is the equivalent of our TASK_BATCH_SIZE\n\nvar buffers = require(\"./buffers\");\n\nvar TASK_BATCH_SIZE = 1024;\n\nvar tasks = buffers.ring(32);\nvar running = false;\nvar queued = false;\n\nvar queue_dispatcher;\n\nfunction process_messages() {\n  running = true;\n  queued = false;\n  var count = 0;\n  while (true) {\n    var task = tasks.pop();\n    if (task === buffers.EMPTY) {\n      break;\n    }\n    // TODO: Don't we need a try/finally here?\n    task();\n    if (count >= TASK_BATCH_SIZE) {\n      break;\n    }\n    count ++;\n  }\n  running = false;\n  if (tasks.length > 0) {\n    queue_dispatcher();\n  }\n}\n\nif (typeof MessageChannel !== \"undefined\") {\n  var message_channel = new MessageChannel();\n  message_channel.port1.onmessage = function(_) {\n    process_messages();\n  };\n  queue_dispatcher = function()  {\n    if (!(queued && running)) {\n      queued = true;\n      message_channel.port2.postMessage(0);\n    }\n  };\n} else if (typeof setImmediate !== \"undefined\") {\n  queue_dispatcher = function() {\n    if (!(queued && running)) {\n      queued = true;\n      setImmediate(process_messages);\n    }\n  };\n} else {\n  queue_dispatcher = function() {\n    if (!(queued && running)) {\n      queued = true;\n      setTimeout(process_messages, 0);\n    }\n  };\n}\n\nexports.run = function (f) {\n  tasks.unbounded_unshift(f);\n  queue_dispatcher();\n};\n\nexports.queue_delay = function(f, delay) {\n  setTimeout(f, delay);\n};\n",
    "\"use strict\";\n\nvar dispatch = require(\"./dispatch\");\nvar select = require(\"./select\");\nvar Channel = require(\"./channels\").Channel;\n\nvar NO_VALUE = {};\n\nvar FnHandler = function(blockable, f) {\n  this.f = f;\n  this.blockable = blockable;\n};\n\nFnHandler.prototype.is_active = function() {\n  return true;\n};\n\nFnHandler.prototype.is_blockable = function() {\n  return this.blockable;\n};\n\nFnHandler.prototype.commit = function() {\n  return this.f;\n};\n\nfunction put_then_callback(channel, value, callback) {\n  var result = channel._put(value, new FnHandler(true, callback));\n  if (result && callback) {\n    callback(result.value);\n  }\n}\n\nfunction take_then_callback(channel, callback) {\n  var result = channel._take(new FnHandler(true, callback));\n  if (result) {\n    callback(result.value);\n  }\n}\n\nvar Process = function(gen, onFinish, creator) {\n  this.gen = gen;\n  this.creatorFunc = creator;\n  this.finished = false;\n  this.onFinish = onFinish;\n};\n\nvar Instruction = function(op, data) {\n  this.op = op;\n  this.data = data;\n};\n\nvar TAKE = \"take\";\nvar PUT = \"put\";\nvar SLEEP = \"sleep\";\nvar ALTS = \"alts\";\n\n// TODO FIX XXX: This is a (probably) temporary hack to avoid blowing\n// up the stack, but it means double queueing when the value is not\n// immediately available\nProcess.prototype._continue = function(response) {\n  var self = this;\n  dispatch.run(function() {\n    self.run(response);\n  });\n};\n\nProcess.prototype._done = function(value) {\n  if (!this.finished) {\n    this.finished = true;\n    var onFinish = this.onFinish;\n    if (typeof onFinish === \"function\") {\n      dispatch.run(function() {\n        onFinish(value);\n      });\n    }\n  }\n};\n\nProcess.prototype.run = function(response) {\n  if (this.finished) {\n    return;\n  }\n\n  // TODO: Shouldn't we (optionally) stop error propagation here (and\n  // signal the error through a channel or something)? Otherwise the\n  // uncaught exception will crash some runtimes (e.g. Node)\n  var iter = this.gen.next(response);\n  if (iter.done) {\n    this._done(iter.value);\n    return;\n  }\n\n  var ins = iter.value;\n  var self = this;\n\n  if (ins instanceof Instruction) {\n    switch (ins.op) {\n    case PUT:\n      var data = ins.data;\n      put_then_callback(data.channel, data.value, function(ok) {\n        self._continue(ok);\n      });\n      break;\n\n    case TAKE:\n      var channel = ins.data;\n      take_then_callback(channel, function(value) {\n        self._continue(value);\n      });\n      break;\n\n    case SLEEP:\n      var msecs = ins.data;\n      dispatch.queue_delay(function() {\n        self.run(null);\n      }, msecs);\n      break;\n\n    case ALTS:\n      select.do_alts(ins.data.operations, function(result) {\n        self._continue(result);\n      }, ins.data.options);\n      break;\n    }\n  }\n  else if(ins instanceof Channel) {\n    var channel = ins;\n    take_then_callback(channel, function(value) {\n      self._continue(value);\n    });\n  }\n  else {\n    this._continue(ins);\n  }\n};\n\nfunction take(channel) {\n  return new Instruction(TAKE, channel);\n}\n\nfunction put(channel, value) {\n  return new Instruction(PUT, {\n    channel: channel,\n    value: value\n  });\n}\n\nfunction poll(channel) {\n  if (channel.closed) {\n    return NO_VALUE;\n  }\n\n  var result = channel._take(new FnHandler(false));\n  if (result) {\n    return result.value;\n  } else {\n    return NO_VALUE;\n  }\n}\n\nfunction offer(channel, value) {\n  if (channel.closed) {\n    return false;\n  }\n\n  var result = channel._put(value, new FnHandler(false));\n  if (result) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction sleep(msecs) {\n  return new Instruction(SLEEP, msecs);\n}\n\nfunction alts(operations, options) {\n  return new Instruction(ALTS, {\n    operations: operations,\n    options: options\n  });\n}\n\nexports.put_then_callback = put_then_callback;\nexports.take_then_callback = take_then_callback;\nexports.put = put;\nexports.take = take;\nexports.offer = offer;\nexports.poll = poll;\nexports.sleep = sleep;\nexports.alts = alts;\nexports.Instruction = Instruction;\nexports.Process = Process;\nexports.NO_VALUE = NO_VALUE;\n",
    "\"use strict\";\n\nvar Box = require(\"./channels\").Box;\n\nvar AltHandler = function(flag, f) {\n  this.f = f;\n  this.flag = flag;\n};\n\nAltHandler.prototype.is_active = function() {\n  return this.flag.value;\n};\n\nAltHandler.prototype.is_blockable = function() {\n  return true;\n};\n\nAltHandler.prototype.commit = function() {\n  this.flag.value = false;\n  return this.f;\n};\n\nvar AltResult = function(value, channel) {\n  this.value = value;\n  this.channel = channel;\n};\n\nfunction rand_int(n) {\n  return Math.floor(Math.random() * (n + 1));\n}\n\nfunction random_array(n) {\n  var a = new Array(n);\n  var i;\n  for (i = 0; i < n; i++) {\n    a[i] = 0;\n  }\n  for (i = 1; i < n; i++) {\n    var j = rand_int(i);\n    a[i] = a[j];\n    a[j] = i;\n  }\n  return a;\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar DEFAULT = {\n  toString: function() {\n    return \"[object DEFAULT]\";\n  }\n};\n\n// TODO: Accept a priority function or something\nexports.do_alts = function(operations, callback, options) {\n  var length = operations.length;\n  // XXX Hmm\n  if (length === 0) {\n    throw new Error(\"Empty alt list\");\n  }\n\n  var priority = (options && options.priority) ? true : false;\n  if (!priority) {\n    var indexes = random_array(length);\n  }\n\n  var flag = new Box(true);\n\n  for (var i = 0; i < length; i++) {\n    var operation = operations[priority ? i : indexes[i]];\n    var port, result;\n    // XXX Hmm\n    if (operation instanceof Array) {\n      var value = operation[1];\n      port = operation[0];\n      // We wrap this in a function to capture the value of \"port\",\n      // because js' closure captures vars by \"references\", not\n      // values. \"let port\" would have worked, but I don't want to\n      // raise the runtime requirement yet. TODO: So change this when\n      // most runtimes are modern enough.\n      result = port._put(value, (function(port) {\n        return new AltHandler(flag, function(ok) {\n          callback(new AltResult(ok, port));\n        });\n      })(port));\n    } else {\n      port = operation;\n      result = port._take((function(port) {\n        return new AltHandler(flag, function(value) {\n          callback(new AltResult(value, port));\n        });\n      })(port));\n    }\n    // XXX Hmm\n    if (result instanceof Box) {\n      callback(new AltResult(result.value, port));\n      break;\n    }\n  }\n\n  if (!(result instanceof Box)\n      && options\n      && hasOwnProperty.call(options, \"default\")) {\n    if (flag.value) {\n      flag.value = false;\n      callback(new AltResult(options[\"default\"], DEFAULT));\n    }\n  }\n};\n\nexports.DEFAULT = DEFAULT;\n",
    "\"use strict\";\n\nvar dispatch = require(\"./dispatch\");\nvar channels = require(\"./channels\");\n\nexports.timeout = function timeout_channel(msecs) {\n  var chan = channels.chan();\n  dispatch.queue_delay(function() {\n    chan.close();\n  }, msecs);\n  return chan;\n};\n",
    "//     Underscore.js 1.8.3\n//     http://underscorejs.org\n//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `exports` on the server.\n  var root = this;\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var\n    push             = ArrayProto.push,\n    slice            = ArrayProto.slice,\n    toString         = ObjProto.toString,\n    hasOwnProperty   = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var\n    nativeIsArray      = Array.isArray,\n    nativeKeys         = Object.keys,\n    nativeBind         = FuncProto.bind,\n    nativeCreate       = Object.create;\n\n  // Naked function reference for surrogate-prototype-swapping.\n  var Ctor = function(){};\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for the old `require()` API. If we're in\n  // the browser, add `_` as a global object.\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root._ = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.8.3';\n\n  // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n  var optimizeCb = function(func, context, argCount) {\n    if (context === void 0) return func;\n    switch (argCount == null ? 3 : argCount) {\n      case 1: return function(value) {\n        return func.call(context, value);\n      };\n      case 2: return function(value, other) {\n        return func.call(context, value, other);\n      };\n      case 3: return function(value, index, collection) {\n        return func.call(context, value, index, collection);\n      };\n      case 4: return function(accumulator, value, index, collection) {\n        return func.call(context, accumulator, value, index, collection);\n      };\n    }\n    return function() {\n      return func.apply(context, arguments);\n    };\n  };\n\n  // A mostly-internal function to generate callbacks that can be applied\n  // to each element in a collection, returning the desired result — either\n  // identity, an arbitrary callback, a property matcher, or a property accessor.\n  var cb = function(value, context, argCount) {\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n    if (_.isObject(value)) return _.matcher(value);\n    return _.property(value);\n  };\n  _.iteratee = function(value, context) {\n    return cb(value, context, Infinity);\n  };\n\n  // An internal function for creating assigner functions.\n  var createAssigner = function(keysFunc, undefinedOnly) {\n    return function(obj) {\n      var length = arguments.length;\n      if (length < 2 || obj == null) return obj;\n      for (var index = 1; index < length; index++) {\n        var source = arguments[index],\n            keys = keysFunc(source),\n            l = keys.length;\n        for (var i = 0; i < l; i++) {\n          var key = keys[i];\n          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];\n        }\n      }\n      return obj;\n    };\n  };\n\n  // An internal function for creating a new object that inherits from another.\n  var baseCreate = function(prototype) {\n    if (!_.isObject(prototype)) return {};\n    if (nativeCreate) return nativeCreate(prototype);\n    Ctor.prototype = prototype;\n    var result = new Ctor;\n    Ctor.prototype = null;\n    return result;\n  };\n\n  var property = function(key) {\n    return function(obj) {\n      return obj == null ? void 0 : obj[key];\n    };\n  };\n\n  // Helper for collection methods to determine whether a collection\n  // should be iterated as an array or as an object\n  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n  var getLength = property('length');\n  var isArrayLike = function(collection) {\n    var length = getLength(collection);\n    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\n  };\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n  _.each = _.forEach = function(obj, iteratee, context) {\n    iteratee = optimizeCb(iteratee, context);\n    var i, length;\n    if (isArrayLike(obj)) {\n      for (i = 0, length = obj.length; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var keys = _.keys(obj);\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n    return obj;\n  };\n\n  // Return the results of applying the iteratee to each element.\n  _.map = _.collect = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length,\n        results = Array(length);\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Create a reducing function iterating left or right.\n  function createReduce(dir) {\n    // Optimized iterator function as using arguments.length\n    // in the main function will deoptimize the, see #1991.\n    function iterator(obj, iteratee, memo, keys, index, length) {\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = keys ? keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n      return memo;\n    }\n\n    return function(obj, iteratee, memo, context) {\n      iteratee = optimizeCb(iteratee, context, 4);\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n      // Determine the initial value if none is provided.\n      if (arguments.length < 3) {\n        memo = obj[keys ? keys[index] : index];\n        index += dir;\n      }\n      return iterator(obj, iteratee, memo, keys, index, length);\n    };\n  }\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n  _.reduce = _.foldl = _.inject = createReduce(1);\n\n  // The right-associative version of reduce, also known as `foldr`.\n  _.reduceRight = _.foldr = createReduce(-1);\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, predicate, context) {\n    var key;\n    if (isArrayLike(obj)) {\n      key = _.findIndex(obj, predicate, context);\n    } else {\n      key = _.findKey(obj, predicate, context);\n    }\n    if (key !== void 0 && key !== -1) return obj[key];\n  };\n\n  // Return all the elements that pass a truth test.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, predicate, context) {\n    var results = [];\n    predicate = cb(predicate, context);\n    _.each(obj, function(value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, predicate, context) {\n    return _.filter(obj, _.negate(cb(predicate)), context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n    return true;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Aliased as `any`.\n  _.some = _.any = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n  };\n\n  // Determine if the array or object contains a given item (using `===`).\n  // Aliased as `includes` and `include`.\n  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {\n    if (!isArrayLike(obj)) obj = _.values(obj);\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n    return _.indexOf(obj, item, fromIndex) >= 0;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = function(obj, method) {\n    var args = slice.call(arguments, 2);\n    var isFunc = _.isFunction(method);\n    return _.map(obj, function(value) {\n      var func = isFunc ? method : value[method];\n      return func == null ? func : func.apply(value, args);\n    });\n  };\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, _.property(key));\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function(obj, attrs) {\n    return _.filter(obj, _.matcher(attrs));\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function(obj, attrs) {\n    return _.find(obj, _.matcher(attrs));\n  };\n\n  // Return the maximum element (or element-based computation).\n  _.max = function(obj, iteratee, context) {\n    var result = -Infinity, lastComputed = -Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Shuffle a collection, using the modern version of the\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  _.shuffle = function(obj) {\n    var set = isArrayLike(obj) ? obj : _.values(obj);\n    var length = set.length;\n    var shuffled = Array(length);\n    for (var index = 0, rand; index < length; index++) {\n      rand = _.random(0, index);\n      if (rand !== index) shuffled[index] = shuffled[rand];\n      shuffled[rand] = set[index];\n    }\n    return shuffled;\n  };\n\n  // Sample **n** random values from a collection.\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `map`.\n  _.sample = function(obj, n, guard) {\n    if (n == null || guard) {\n      if (!isArrayLike(obj)) obj = _.values(obj);\n      return obj[_.random(obj.length - 1)];\n    }\n    return _.shuffle(obj).slice(0, Math.max(0, n));\n  };\n\n  // Sort the object's values by a criterion produced by an iteratee.\n  _.sortBy = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value: value,\n        index: index,\n        criteria: iteratee(value, index, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate \"group by\" operations.\n  var group = function(behavior) {\n    return function(obj, iteratee, context) {\n      var result = {};\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key].push(value); else result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n  _.indexBy = group(function(result, value, key) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key]++; else result[key] = 1;\n  });\n\n  // Safely create a real, live array from anything iterable.\n  _.toArray = function(obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (isArrayLike(obj)) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return isArrayLike(obj) ? obj.length : _.keys(obj).length;\n  };\n\n  // Split a collection into two arrays: one whose elements all satisfy the given\n  // predicate, and one whose elements all do not satisfy the predicate.\n  _.partition = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var pass = [], fail = [];\n    _.each(obj, function(value, key, obj) {\n      (predicate(value, key, obj) ? pass : fail).push(value);\n    });\n    return [pass, fail];\n  };\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[0];\n    return _.initial(array, array.length - n);\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array.\n  _.last = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[array.length - 1];\n    return _.rest(array, Math.max(0, array.length - n));\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array.\n  _.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, _.identity);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function(input, shallow, strict, startIndex) {\n    var output = [], idx = 0;\n    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {\n      var value = input[i];\n      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n        //flatten current level of array or arguments object\n        if (!shallow) value = flatten(value, shallow, strict);\n        var j = 0, len = value.length;\n        output.length += len;\n        while (j < len) {\n          output[idx++] = value[j++];\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n    return output;\n  };\n\n  // Flatten out an array, either recursively (by default), or just one level.\n  _.flatten = function(array, shallow) {\n    return flatten(array, shallow, false);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = function(array) {\n    return _.difference(array, slice.call(arguments, 1));\n  };\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iteratee, context) {\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var value = array[i],\n          computed = iteratee ? iteratee(value, i, array) : value;\n      if (isSorted) {\n        if (!i || seen !== computed) result.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        if (!_.contains(seen, computed)) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!_.contains(result, value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = function() {\n    return _.uniq(flatten(arguments, true, true));\n  };\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function(array) {\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var item = array[i];\n      if (_.contains(result, item)) continue;\n      for (var j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = function(array) {\n    var rest = flatten(arguments, true, true, 1);\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = function() {\n    return _.unzip(arguments);\n  };\n\n  // Complement of _.zip. Unzip accepts an array of arrays and groups\n  // each array's elements on shared indices\n  _.unzip = function(array) {\n    var length = array && _.max(array, getLength).length || 0;\n    var result = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      result[index] = _.pluck(array, index);\n    }\n    return result;\n  };\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values.\n  _.object = function(list, values) {\n    var result = {};\n    for (var i = 0, length = getLength(list); i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // Generator function to create the findIndex and findLastIndex functions\n  function createPredicateIndexFinder(dir) {\n    return function(array, predicate, context) {\n      predicate = cb(predicate, context);\n      var length = getLength(array);\n      var index = dir > 0 ? 0 : length - 1;\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) return index;\n      }\n      return -1;\n    };\n  }\n\n  // Returns the first index on an array-like that passes a predicate test\n  _.findIndex = createPredicateIndexFinder(1);\n  _.findLastIndex = createPredicateIndexFinder(-1);\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0, high = getLength(array);\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n    }\n    return low;\n  };\n\n  // Generator function to create the indexOf and lastIndexOf functions\n  function createIndexFinder(dir, predicateFind, sortedIndex) {\n    return function(array, item, idx) {\n      var i = 0, length = getLength(array);\n      if (typeof idx == 'number') {\n        if (dir > 0) {\n            i = idx >= 0 ? idx : Math.max(idx + length, i);\n        } else {\n            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n        }\n      } else if (sortedIndex && idx && length) {\n        idx = sortedIndex(array, item);\n        return array[idx] === item ? idx : -1;\n      }\n      if (item !== item) {\n        idx = predicateFind(slice.call(array, i, length), _.isNaN);\n        return idx >= 0 ? idx + i : -1;\n      }\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n        if (array[idx] === item) return idx;\n      }\n      return -1;\n    };\n  }\n\n  // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);\n  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (stop == null) {\n      stop = start || 0;\n      start = 0;\n    }\n    step = step || 1;\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Determines whether to execute a function as a constructor\n  // or a normal function with the provided arguments\n  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (_.isObject(result)) return result;\n    return self;\n  };\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = function(func, context) {\n    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n    var args = slice.call(arguments, 2);\n    var bound = function() {\n      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));\n    };\n    return bound;\n  };\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n  // as a placeholder, allowing any combination of arguments to be pre-filled.\n  _.partial = function(func) {\n    var boundArgs = slice.call(arguments, 1);\n    var bound = function() {\n      var position = 0, length = boundArgs.length;\n      var args = Array(length);\n      for (var i = 0; i < length; i++) {\n        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return executeBound(func, bound, this, this, args);\n    };\n    return bound;\n  };\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  _.bindAll = function(obj) {\n    var i, length = arguments.length, key;\n    if (length <= 1) throw new Error('bindAll must be passed function names');\n    for (i = 1; i < length; i++) {\n      key = arguments[i];\n      obj[key] = _.bind(obj[key], obj);\n    }\n    return obj;\n  };\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memoize = function(key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = function(func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function(){\n      return func.apply(null, args);\n    }, wait);\n  };\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = _.partial(_.delay, _, 1);\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  _.throttle = function(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    if (!options) options = {};\n    var later = function() {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n    return function() {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout, args, context, timestamp, result;\n\n    var later = function() {\n      var last = _.now() - timestamp;\n\n      if (last < wait && last >= 0) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n        if (!immediate) {\n          result = func.apply(context, args);\n          if (!timeout) context = args = null;\n        }\n      }\n    };\n\n    return function() {\n      context = this;\n      args = arguments;\n      timestamp = _.now();\n      var callNow = immediate && !timeout;\n      if (!timeout) timeout = setTimeout(later, wait);\n      if (callNow) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n\n      return result;\n    };\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return _.partial(wrapper, func);\n  };\n\n  // Returns a negated version of the passed-in predicate.\n  _.negate = function(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function() {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n      while (i--) result = args[i].call(this, result);\n      return result;\n    };\n  };\n\n  // Returns a function that will only be executed on and after the Nth call.\n  _.after = function(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Returns a function that will only be executed up to (but not including) the Nth call.\n  _.before = function(times, func) {\n    var memo;\n    return function() {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      }\n      if (times <= 1) func = null;\n      return memo;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = _.partial(_.before, 2);\n\n  // Object Functions\n  // ----------------\n\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\n                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n  function collectNonEnumProps(obj, keys) {\n    var nonEnumIdx = nonEnumerableProps.length;\n    var constructor = obj.constructor;\n    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;\n\n    // Constructor is a special case.\n    var prop = 'constructor';\n    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);\n\n    while (nonEnumIdx--) {\n      prop = nonEnumerableProps[nonEnumIdx];\n      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {\n        keys.push(prop);\n      }\n    }\n  }\n\n  // Retrieve the names of an object's own properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\n  _.keys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (_.has(obj, key)) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve all the property names of an object.\n  _.allKeys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    var keys = [];\n    for (var key in obj) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var values = Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n    return values;\n  };\n\n  // Returns the results of applying the iteratee to each element of the object\n  // In contrast to _.map it returns an object\n  _.mapObject = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys =  _.keys(obj),\n          length = keys.length,\n          results = {},\n          currentKey;\n      for (var index = 0; index < length; index++) {\n        currentKey = keys[index];\n        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n      }\n      return results;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  _.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function(obj) {\n    var result = {};\n    var keys = _.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = createAssigner(_.allKeys);\n\n  // Assigns a given object with all the own properties in the passed-in object(s)\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n  _.extendOwn = _.assign = createAssigner(_.keys);\n\n  // Returns the first key on an object that passes a predicate test\n  _.findKey = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = _.keys(obj), key;\n    for (var i = 0, length = keys.length; i < length; i++) {\n      key = keys[i];\n      if (predicate(obj[key], key, obj)) return key;\n    }\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = function(object, oiteratee, context) {\n    var result = {}, obj = object, iteratee, keys;\n    if (obj == null) return result;\n    if (_.isFunction(oiteratee)) {\n      keys = _.allKeys(obj);\n      iteratee = optimizeCb(oiteratee, context);\n    } else {\n      keys = flatten(arguments, false, false, 1);\n      iteratee = function(value, key, obj) { return key in obj; };\n      obj = Object(obj);\n    }\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n      var value = obj[key];\n      if (iteratee(value, key, obj)) result[key] = value;\n    }\n    return result;\n  };\n\n   // Return a copy of the object without the blacklisted properties.\n  _.omit = function(obj, iteratee, context) {\n    if (_.isFunction(iteratee)) {\n      iteratee = _.negate(iteratee);\n    } else {\n      var keys = _.map(flatten(arguments, false, false, 1), String);\n      iteratee = function(value, key) {\n        return !_.contains(keys, key);\n      };\n    }\n    return _.pick(obj, iteratee, context);\n  };\n\n  // Fill in a given object with default properties.\n  _.defaults = createAssigner(_.allKeys, true);\n\n  // Creates an object that inherits from the given prototype object.\n  // If additional properties are provided then they will be added to the\n  // created object.\n  _.create = function(prototype, props) {\n    var result = baseCreate(prototype);\n    if (props) _.extendOwn(result, props);\n    return result;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Returns whether an object has a given set of `key:value` pairs.\n  _.isMatch = function(object, attrs) {\n    var keys = _.keys(attrs), length = keys.length;\n    if (object == null) return !length;\n    var obj = Object(object);\n    for (var i = 0; i < length; i++) {\n      var key = keys[i];\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\n    }\n    return true;\n  };\n\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n    }\n\n    var areArrays = className === '[object Array]';\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false;\n\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n      var aCtor = a.constructor, bCtor = b.constructor;\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n                               _.isFunction(bCtor) && bCtor instanceof bCtor)\n                          && ('constructor' in a && 'constructor' in b)) {\n        return false;\n      }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false;\n      // Deep compare the contents, ignoring non-numeric properties.\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a), key;\n      length = keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      if (_.keys(b).length !== length) return false;\n      while (length--) {\n        // Deep compare each member\n        key = keys[length];\n        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\n    return _.keys(obj).length === 0;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) === '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {\n    _['is' + name] = function(obj) {\n      return toString.call(obj) === '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where\n  // there isn't any inspectable \"Arguments\" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return _.has(obj, 'callee');\n    };\n  }\n\n  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\n  // IE 11 (#1621), and in Safari 8 (#1929).\n  if (typeof /./ != 'function' && typeof Int8Array != 'object') {\n    _.isFunction = function(obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`? (NaN is the only number which does not equal itself).\n  _.isNaN = function(obj) {\n    return _.isNumber(obj) && obj !== +obj;\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function(obj, key) {\n    return obj != null && hasOwnProperty.call(obj, key);\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iteratees.\n  _.identity = function(value) {\n    return value;\n  };\n\n  // Predicate-generating functions. Often useful outside of Underscore.\n  _.constant = function(value) {\n    return function() {\n      return value;\n    };\n  };\n\n  _.noop = function(){};\n\n  _.property = property;\n\n  // Generates a function for a given object that returns a given property.\n  _.propertyOf = function(obj) {\n    return obj == null ? function(){} : function(key) {\n      return obj[key];\n    };\n  };\n\n  // Returns a predicate for checking whether an object has a given set of\n  // `key:value` pairs.\n  _.matcher = _.matches = function(attrs) {\n    attrs = _.extendOwn({}, attrs);\n    return function(obj) {\n      return _.isMatch(obj, attrs);\n    };\n  };\n\n  // Run a function **n** times.\n  _.times = function(n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = optimizeCb(iteratee, context, 1);\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  _.now = Date.now || function() {\n    return new Date().getTime();\n  };\n\n   // List of HTML entities for escaping.\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n  var unescapeMap = _.invert(escapeMap);\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  var createEscaper = function(map) {\n    var escaper = function(match) {\n      return map[match];\n    };\n    // Regexes for identifying a key that needs to be escaped\n    var source = '(?:' + _.keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function(string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  };\n  _.escape = createEscaper(escapeMap);\n  _.unescape = createEscaper(unescapeMap);\n\n  // If the value of the named `property` is a function then invoke it with the\n  // `object` as context; otherwise, return it.\n  _.result = function(object, property, fallback) {\n    var value = object == null ? void 0 : object[property];\n    if (value === void 0) {\n      value = fallback;\n    }\n    return _.isFunction(value) ? value.call(object) : value;\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate    : /<%([\\s\\S]+?)%>/g,\n    interpolate : /<%=([\\s\\S]+?)%>/g,\n    escape      : /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\":      \"'\",\n    '\\\\':     '\\\\',\n    '\\r':     'r',\n    '\\n':     'n',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escaper = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  var escapeChar = function(match) {\n    return '\\\\' + escapes[match];\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n  _.template = function(text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escaper, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n\n      // Adobe VMs need the match returned to produce the correct offest.\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + 'return __p;\\n';\n\n    try {\n      var render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled source as a convenience for precompilation.\n    var argument = settings.variable || 'obj';\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n  _.chain = function(obj) {\n    var instance = _(obj);\n    instance._chain = true;\n    return instance;\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var result = function(instance, obj) {\n    return instance._chain ? _(obj).chain() : obj;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function(obj) {\n    _.each(_.functions(obj), function(name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return result(this, func.apply(_, args));\n      };\n    });\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n      return result(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  _.each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      return result(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  // Extracts the result from a wrapped and chained object.\n  _.prototype.value = function() {\n    return this._wrapped;\n  };\n\n  // Provide unwrapping proxy for some methods used in engine operations\n  // such as arithmetic and JSON stringification.\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n\n  _.prototype.toString = function() {\n    return '' + this._wrapped;\n  };\n\n  // AMD registration happens at the end for compatibility with AMD loaders\n  // that may not enforce next-turn semantics on modules. Even though general\n  // practice for AMD registration is to be anonymous, underscore registers\n  // as a named module because, like jQuery, it is a base library that is\n  // popular enough to be bundled in a third party lib, but not be part of\n  // an AMD load request. Those cases could generate an error when an\n  // anonymous define() is called outside of a loader request.\n  if (typeof define === 'function' && define.amd) {\n    define('underscore', [], function() {\n      return _;\n    });\n  }\n}.call(this));\n"
  ]
}